/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.baloise.open.edw.infrastructure.kafka.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Sports activity as provided by Strava, Komooot, etc. */
@org.apache.avro.specific.AvroGenerated
public class ActivityDto extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3370436617317452339L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ActivityDto\",\"namespace\":\"com.baloise.open.edw.infrastructure.kafka.model\",\"doc\":\"Sports activity as provided by Strava, Komooot, etc.\",\"fields\":[{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Human readable name of the activity.\"},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Type of activity like running.\"},{\"name\":\"timezone\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Timezone where the activity took place - important for times.\"},{\"name\":\"movingTime\",\"type\":[\"null\",\"int\"],\"doc\":\"Amount of time in seconds the activity took place while being in motion.\"},{\"name\":\"elapsedTime\",\"type\":[\"null\",\"int\"],\"doc\":\"Amount of time in seconds the activity took place.\"},{\"name\":\"startDate\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"time\"}],\"doc\":\"Date when activity started.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ActivityDto> ENCODER =
      new BinaryMessageEncoder<ActivityDto>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ActivityDto> DECODER =
      new BinaryMessageDecoder<ActivityDto>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ActivityDto> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ActivityDto> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ActivityDto> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ActivityDto>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ActivityDto to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ActivityDto from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ActivityDto instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ActivityDto fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Human readable name of the activity. */
  private java.lang.String name;
  /** Type of activity like running. */
  private java.lang.String type;
  /** Timezone where the activity took place - important for times. */
  private java.lang.String timezone;
  /** Amount of time in seconds the activity took place while being in motion. */
  private java.lang.Integer movingTime;
  /** Amount of time in seconds the activity took place. */
  private java.lang.Integer elapsedTime;
  /** Date when activity started. */
  private java.lang.Long startDate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ActivityDto() {}

  /**
   * All-args constructor.
   * @param name Human readable name of the activity.
   * @param type Type of activity like running.
   * @param timezone Timezone where the activity took place - important for times.
   * @param movingTime Amount of time in seconds the activity took place while being in motion.
   * @param elapsedTime Amount of time in seconds the activity took place.
   * @param startDate Date when activity started.
   */
  public ActivityDto(java.lang.String name, java.lang.String type, java.lang.String timezone, java.lang.Integer movingTime, java.lang.Integer elapsedTime, java.lang.Long startDate) {
    this.name = name;
    this.type = type;
    this.timezone = timezone;
    this.movingTime = movingTime;
    this.elapsedTime = elapsedTime;
    this.startDate = startDate;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return type;
    case 2: return timezone;
    case 3: return movingTime;
    case 4: return elapsedTime;
    case 5: return startDate;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = value$ != null ? value$.toString() : null; break;
    case 1: type = value$ != null ? value$.toString() : null; break;
    case 2: timezone = value$ != null ? value$.toString() : null; break;
    case 3: movingTime = (java.lang.Integer)value$; break;
    case 4: elapsedTime = (java.lang.Integer)value$; break;
    case 5: startDate = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return Human readable name of the activity.
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * Human readable name of the activity.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return Type of activity like running.
   */
  public java.lang.String getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * Type of activity like running.
   * @param value the value to set.
   */
  public void setType(java.lang.String value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'timezone' field.
   * @return Timezone where the activity took place - important for times.
   */
  public java.lang.String getTimezone() {
    return timezone;
  }


  /**
   * Sets the value of the 'timezone' field.
   * Timezone where the activity took place - important for times.
   * @param value the value to set.
   */
  public void setTimezone(java.lang.String value) {
    this.timezone = value;
  }

  /**
   * Gets the value of the 'movingTime' field.
   * @return Amount of time in seconds the activity took place while being in motion.
   */
  public java.lang.Integer getMovingTime() {
    return movingTime;
  }


  /**
   * Sets the value of the 'movingTime' field.
   * Amount of time in seconds the activity took place while being in motion.
   * @param value the value to set.
   */
  public void setMovingTime(java.lang.Integer value) {
    this.movingTime = value;
  }

  /**
   * Gets the value of the 'elapsedTime' field.
   * @return Amount of time in seconds the activity took place.
   */
  public java.lang.Integer getElapsedTime() {
    return elapsedTime;
  }


  /**
   * Sets the value of the 'elapsedTime' field.
   * Amount of time in seconds the activity took place.
   * @param value the value to set.
   */
  public void setElapsedTime(java.lang.Integer value) {
    this.elapsedTime = value;
  }

  /**
   * Gets the value of the 'startDate' field.
   * @return Date when activity started.
   */
  public java.lang.Long getStartDate() {
    return startDate;
  }


  /**
   * Sets the value of the 'startDate' field.
   * Date when activity started.
   * @param value the value to set.
   */
  public void setStartDate(java.lang.Long value) {
    this.startDate = value;
  }

  /**
   * Creates a new ActivityDto RecordBuilder.
   * @return A new ActivityDto RecordBuilder
   */
  public static com.baloise.open.edw.infrastructure.kafka.model.ActivityDto.Builder newBuilder() {
    return new com.baloise.open.edw.infrastructure.kafka.model.ActivityDto.Builder();
  }

  /**
   * Creates a new ActivityDto RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ActivityDto RecordBuilder
   */
  public static com.baloise.open.edw.infrastructure.kafka.model.ActivityDto.Builder newBuilder(com.baloise.open.edw.infrastructure.kafka.model.ActivityDto.Builder other) {
    if (other == null) {
      return new com.baloise.open.edw.infrastructure.kafka.model.ActivityDto.Builder();
    } else {
      return new com.baloise.open.edw.infrastructure.kafka.model.ActivityDto.Builder(other);
    }
  }

  /**
   * Creates a new ActivityDto RecordBuilder by copying an existing ActivityDto instance.
   * @param other The existing instance to copy.
   * @return A new ActivityDto RecordBuilder
   */
  public static com.baloise.open.edw.infrastructure.kafka.model.ActivityDto.Builder newBuilder(com.baloise.open.edw.infrastructure.kafka.model.ActivityDto other) {
    if (other == null) {
      return new com.baloise.open.edw.infrastructure.kafka.model.ActivityDto.Builder();
    } else {
      return new com.baloise.open.edw.infrastructure.kafka.model.ActivityDto.Builder(other);
    }
  }

  /**
   * RecordBuilder for ActivityDto instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ActivityDto>
    implements org.apache.avro.data.RecordBuilder<ActivityDto> {

    /** Human readable name of the activity. */
    private java.lang.String name;
    /** Type of activity like running. */
    private java.lang.String type;
    /** Timezone where the activity took place - important for times. */
    private java.lang.String timezone;
    /** Amount of time in seconds the activity took place while being in motion. */
    private java.lang.Integer movingTime;
    /** Amount of time in seconds the activity took place. */
    private java.lang.Integer elapsedTime;
    /** Date when activity started. */
    private java.lang.Long startDate;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.baloise.open.edw.infrastructure.kafka.model.ActivityDto.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.timezone)) {
        this.timezone = data().deepCopy(fields()[2].schema(), other.timezone);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.movingTime)) {
        this.movingTime = data().deepCopy(fields()[3].schema(), other.movingTime);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.elapsedTime)) {
        this.elapsedTime = data().deepCopy(fields()[4].schema(), other.elapsedTime);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.startDate)) {
        this.startDate = data().deepCopy(fields()[5].schema(), other.startDate);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing ActivityDto instance
     * @param other The existing instance to copy.
     */
    private Builder(com.baloise.open.edw.infrastructure.kafka.model.ActivityDto other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timezone)) {
        this.timezone = data().deepCopy(fields()[2].schema(), other.timezone);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.movingTime)) {
        this.movingTime = data().deepCopy(fields()[3].schema(), other.movingTime);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.elapsedTime)) {
        this.elapsedTime = data().deepCopy(fields()[4].schema(), other.elapsedTime);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.startDate)) {
        this.startDate = data().deepCopy(fields()[5].schema(), other.startDate);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * Human readable name of the activity.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * Human readable name of the activity.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.baloise.open.edw.infrastructure.kafka.model.ActivityDto.Builder setName(java.lang.String value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * Human readable name of the activity.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * Human readable name of the activity.
      * @return This builder.
      */
    public com.baloise.open.edw.infrastructure.kafka.model.ActivityDto.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * Type of activity like running.
      * @return The value.
      */
    public java.lang.String getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * Type of activity like running.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.baloise.open.edw.infrastructure.kafka.model.ActivityDto.Builder setType(java.lang.String value) {
      validate(fields()[1], value);
      this.type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * Type of activity like running.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'type' field.
      * Type of activity like running.
      * @return This builder.
      */
    public com.baloise.open.edw.infrastructure.kafka.model.ActivityDto.Builder clearType() {
      type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'timezone' field.
      * Timezone where the activity took place - important for times.
      * @return The value.
      */
    public java.lang.String getTimezone() {
      return timezone;
    }


    /**
      * Sets the value of the 'timezone' field.
      * Timezone where the activity took place - important for times.
      * @param value The value of 'timezone'.
      * @return This builder.
      */
    public com.baloise.open.edw.infrastructure.kafka.model.ActivityDto.Builder setTimezone(java.lang.String value) {
      validate(fields()[2], value);
      this.timezone = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'timezone' field has been set.
      * Timezone where the activity took place - important for times.
      * @return True if the 'timezone' field has been set, false otherwise.
      */
    public boolean hasTimezone() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'timezone' field.
      * Timezone where the activity took place - important for times.
      * @return This builder.
      */
    public com.baloise.open.edw.infrastructure.kafka.model.ActivityDto.Builder clearTimezone() {
      timezone = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'movingTime' field.
      * Amount of time in seconds the activity took place while being in motion.
      * @return The value.
      */
    public java.lang.Integer getMovingTime() {
      return movingTime;
    }


    /**
      * Sets the value of the 'movingTime' field.
      * Amount of time in seconds the activity took place while being in motion.
      * @param value The value of 'movingTime'.
      * @return This builder.
      */
    public com.baloise.open.edw.infrastructure.kafka.model.ActivityDto.Builder setMovingTime(java.lang.Integer value) {
      validate(fields()[3], value);
      this.movingTime = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'movingTime' field has been set.
      * Amount of time in seconds the activity took place while being in motion.
      * @return True if the 'movingTime' field has been set, false otherwise.
      */
    public boolean hasMovingTime() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'movingTime' field.
      * Amount of time in seconds the activity took place while being in motion.
      * @return This builder.
      */
    public com.baloise.open.edw.infrastructure.kafka.model.ActivityDto.Builder clearMovingTime() {
      movingTime = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'elapsedTime' field.
      * Amount of time in seconds the activity took place.
      * @return The value.
      */
    public java.lang.Integer getElapsedTime() {
      return elapsedTime;
    }


    /**
      * Sets the value of the 'elapsedTime' field.
      * Amount of time in seconds the activity took place.
      * @param value The value of 'elapsedTime'.
      * @return This builder.
      */
    public com.baloise.open.edw.infrastructure.kafka.model.ActivityDto.Builder setElapsedTime(java.lang.Integer value) {
      validate(fields()[4], value);
      this.elapsedTime = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'elapsedTime' field has been set.
      * Amount of time in seconds the activity took place.
      * @return True if the 'elapsedTime' field has been set, false otherwise.
      */
    public boolean hasElapsedTime() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'elapsedTime' field.
      * Amount of time in seconds the activity took place.
      * @return This builder.
      */
    public com.baloise.open.edw.infrastructure.kafka.model.ActivityDto.Builder clearElapsedTime() {
      elapsedTime = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'startDate' field.
      * Date when activity started.
      * @return The value.
      */
    public java.lang.Long getStartDate() {
      return startDate;
    }


    /**
      * Sets the value of the 'startDate' field.
      * Date when activity started.
      * @param value The value of 'startDate'.
      * @return This builder.
      */
    public com.baloise.open.edw.infrastructure.kafka.model.ActivityDto.Builder setStartDate(java.lang.Long value) {
      validate(fields()[5], value);
      this.startDate = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'startDate' field has been set.
      * Date when activity started.
      * @return True if the 'startDate' field has been set, false otherwise.
      */
    public boolean hasStartDate() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'startDate' field.
      * Date when activity started.
      * @return This builder.
      */
    public com.baloise.open.edw.infrastructure.kafka.model.ActivityDto.Builder clearStartDate() {
      startDate = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ActivityDto build() {
      try {
        ActivityDto record = new ActivityDto();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.String) defaultValue(fields()[0]);
        record.type = fieldSetFlags()[1] ? this.type : (java.lang.String) defaultValue(fields()[1]);
        record.timezone = fieldSetFlags()[2] ? this.timezone : (java.lang.String) defaultValue(fields()[2]);
        record.movingTime = fieldSetFlags()[3] ? this.movingTime : (java.lang.Integer) defaultValue(fields()[3]);
        record.elapsedTime = fieldSetFlags()[4] ? this.elapsedTime : (java.lang.Integer) defaultValue(fields()[4]);
        record.startDate = fieldSetFlags()[5] ? this.startDate : (java.lang.Long) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ActivityDto>
    WRITER$ = (org.apache.avro.io.DatumWriter<ActivityDto>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ActivityDto>
    READER$ = (org.apache.avro.io.DatumReader<ActivityDto>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.name == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.name);
    }

    if (this.type == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.type);
    }

    if (this.timezone == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.timezone);
    }

    if (this.movingTime == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.movingTime);
    }

    if (this.elapsedTime == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.elapsedTime);
    }

    if (this.startDate == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.startDate);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.name = null;
      } else {
        this.name = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.type = null;
      } else {
        this.type = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.timezone = null;
      } else {
        this.timezone = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.movingTime = null;
      } else {
        this.movingTime = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.elapsedTime = null;
      } else {
        this.elapsedTime = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.startDate = null;
      } else {
        this.startDate = in.readLong();
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.name = null;
          } else {
            this.name = in.readString();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.type = null;
          } else {
            this.type = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.timezone = null;
          } else {
            this.timezone = in.readString();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.movingTime = null;
          } else {
            this.movingTime = in.readInt();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.elapsedTime = null;
          } else {
            this.elapsedTime = in.readInt();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.startDate = null;
          } else {
            this.startDate = in.readLong();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










